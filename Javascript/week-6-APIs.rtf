{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red56\green56\blue57;\red239\green239\blue239;\red56\green56\blue59;
\red245\green245\blue247;\red129\green144\blue144;\red22\green75\blue126;\red56\green56\blue57;\red239\green239\blue239;
\red52\green52\blue52;\red242\green242\blue242;}
{\*\expandedcolortbl;;\cssrgb\c28235\c28235\c29020;\cssrgb\c94902\c94902\c94902;\cssrgb\c28235\c28235\c29804;
\cssrgb\c96863\c96863\c97647;\cssrgb\c57647\c63137\c63137;\cssrgb\c9804\c37255\c56863;\cssrgb\c28235\c28235\c29020;\cssrgb\c94902\c94902\c94902;
\cssrgb\c26667\c26667\c26667;\cssrgb\c96078\c96078\c96078;}
\margl1440\margr1440\vieww8480\viewh16520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Week 6 APIs\
Single-thread \
non-blocking won\'92t wait \\]\
Concurrency can do things at the same time\
Application Programing Interfaces\
Request \
Responses\
 Header - date, content type\
 Body \
 Status codes 200 successful! 400: bad request\
\
API requests\
GET \
POST \
\

\f1\b\fs28 API 
\f0\b0\fs24 \
Choose your API\
Get a key\
Token based authentication (attach our API key to calls to the server)\
OAuth \'97research this topic\
Sign up and get a key\
Getting a request a parsing it \'91\
  (save it into an object, then you can access the data)\
Make an API Call\
- Long old fashion way\
- jQuery method\
Managing API Keys\
.env holds the key\
 Put it in the .gitignor so it does not endup visible\
\
Weather key 
\f2\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ca2af38d85a33ac4922920ae7243bd89\

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\sl548\partightenfactor0

\f2\fs38\fsmilli19200 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 api\cf6 \strokec6 .\cf4 \strokec4 openweathermap\cf6 \strokec6 .\cf4 \strokec4 org\cf6 \strokec6 /\cf4 \strokec4 data\cf6 \strokec6 /\cf7 \strokec7 2.5\cf6 \strokec6 /\cf4 \strokec4 weather\cf6 \strokec6 ?\cf4 \strokec4 q\cf6 \strokec6 =\cf4 \strokec4 portland\cf6 \strokec6 ,\cf4 \strokec4 oregon\cf6 \strokec6 &\cf4 \strokec4 appid\cf6 \strokec6 =[
\fs26 \cf8 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ca2af38d85a33ac4922920ae7243bd89
\fs38\fsmilli19200 \cf6 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ]\cf10 \cb11 \strokec10 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
Exception Handling ONLY FOR EXCEPTIONAL ERROS\
 
\f1\b Control flow
\f0\b0  (how the logic moves through the code)\
  
\f1\b try
\f0\b0  wrap code inside this\
  
\f1\b catch
\f0\b0  if any errors pop up catch them and store them\
  
\f1\b finally
\f0\b0  runs regardless of errors \
 
\f1\b try \{\
  
\f0\b0  Objects: \
   Error\{\'93make your own error\'94\}, \
   RangeError\{when a number is outside of range\}\
   Operator\
     .instanceof checks the type of object\
        let error = new Error;\
        error instancesof Error;\
        >true\

\f1\b       
\f0\b0 console.error logs message in red for errors
\f1\b \
  \}\
  throw 
\f0\b0 moves error to catch block\
  
\f1\b log 
\f0\b0 errors can be logged \
\
\
Promises are objects\
Let promis = fetch(url),\
1. Pending\
2. Fulfilled\
3. Rejected gotErr(err)\
\
then() //function that receives a function to be executed when its been fulfilled\
catch(). //function to run if rejected\
\
fetch returns JSON\'97convert to an object\
\
fetch(wordnikAPI)  //promis from the API when:\
 .then((data) => console.log(data)). //when fulfilled console log data\
 .catch((err) => console.log(err));  //when err console.log err\
\
Promises.all (an array of promises)\
Make your own promises\
async and await\
\
Callback\'97function that calls another function\
\
Promise.prototype.then() rejected promises\
\
\
\
\
\
\
\
\
\
\
}